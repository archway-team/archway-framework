{"version":3,"file":"bundle.js","sources":["../../index.js"],"sourcesContent":["/* Rendering Engine */\r\nfunction arch(tag, attrs, ...children) {\r\n  return {\r\n    tag,\r\n    attrs,\r\n    children: children.flat() || [],\r\n  };\r\n}\r\n\r\nfunction renderNode(node) {\r\n  let vNode = node;\r\n  let component = typeof node.render == \"function\";\r\n  if (component) {\r\n    vNode = node.render();\r\n    node.vNode = vNode;\r\n  }\r\n\r\n  const { tag, attrs, children } = vNode;\r\n\r\n  let el = document.createElement(tag);\r\n\r\n  for (const [key, value] of Object.entries(attrs)) {\r\n    key.startsWith(\"on\")\r\n      ? el.addEventListener(key.substring(2).toLowerCase(), value)\r\n      : el.setAttribute(key, value);\r\n  }\r\n  for (const child of children) {\r\n    el.appendChild(renderHandler(child));\r\n  }\r\n  if (component) {\r\n    node.vBase = el;\r\n  }\r\n\r\n  return el;\r\n}\r\n\r\nfunction renderHandler(node) {\r\n  return typeof node === \"string\"\r\n    ? document.createTextNode(node)\r\n    : renderNode(node);\r\n}\r\n\r\nfunction mount(node, target) {\r\n  target.appendChild(node);\r\n  return node;\r\n}\r\n\r\nfunction render(node, target) {\r\n  mount(renderHandler(node), target);\r\n}\r\n\r\n/* Diff Algorithm */\r\nfunction zip(xs, ys) {\r\n  const zipped = [];\r\n  for (let i = 0; i < Math.min(xs, ys); i++) {\r\n    zipped.push([xs[i], ys[i]]);\r\n  }\r\n  return zipped;\r\n}\r\n\r\nfunction diffAttrs(oldAttrs, newAttrs) {\r\n  let patches = [];\r\n  for (const [key, value] of Object.entries(newAttrs)) {\r\n    patches.push((node) => {\r\n      key.startsWith(\"on\")\r\n        ? node.addEventListener(key.substring(2).toLowerCase(), value)\r\n        : node.setAttribute(key, value);\r\n\r\n      return node;\r\n    });\r\n  }\r\n  for (const key in oldAttrs) {\r\n    if (!(key in newAttrs)) {\r\n      patches.push((node) => {\r\n        node.removeAttribute(key);\r\n        return node;\r\n      });\r\n    }\r\n  }\r\n  return (node) => {\r\n    for (const patch of patches) {\r\n      patch(node);\r\n    }\r\n    return node;\r\n  };\r\n}\r\n\r\nfunction diffChildren(oldChildren, newChildren) {\r\n  let patches = [];\r\n  oldChildren.forEach((child, i) => {\r\n    patches.push(diffTree(child, newChildren[i]));\r\n  });\r\n\r\n  let _patches = [];\r\n  for (const child of newChildren.slice(oldChildren.length)) {\r\n    _patches.push((node) => {\r\n      node.appendChild(renderHandler(child));\r\n      return node;\r\n    });\r\n  }\r\n  return (parent) => {\r\n    for (const [patch, child] of zip(patches, parent.childNodes)) patch(child);\r\n\r\n    for (const patch of _patches) patch(parent);\r\n\r\n    return parent;\r\n  };\r\n}\r\n\r\nfunction diffTree(oldTree, newTree) {\r\n  if (!newTree) {\r\n    return (node) => {\r\n      node.remove();\r\n    };\r\n  }\r\n  if (typeof oldTree == \"string\" || typeof newTree == \"string\") {\r\n    if (oldTree !== newTree) {\r\n      return (node) => {\r\n        const replacement = renderHandler(newTree);\r\n        node.replaceWith(replacement);\r\n        return replacement;\r\n      };\r\n    } else {\r\n      return (node) => node;\r\n    }\r\n  }\r\n  if (oldTree.tag !== newTree.tag) {\r\n    return (node) => {\r\n      const replacement = renderHandler(newTree);\r\n      node.replaceWith(replacement);\r\n      return replacement;\r\n    };\r\n  }\r\n  const patchAttrs = diffAttrs(oldTree.attrs, newTree.attrs);\r\n  const patchChildren = diffChildren(oldTree.children, newTree.children);\r\n\r\n  return (node) => {\r\n    patchAttrs(node);\r\n    patchChildren(node);\r\n    return node;\r\n  };\r\n}\r\n\r\n/* Component */\r\nclass Component {\r\n  constructor(...props) {\r\n    let attrs = props.shift() || {};\r\n\r\n    this.props = Object.assign(attrs, {\r\n      children: props.flat().filter((v) => v) || [],\r\n    });\r\n\r\n    this.vNode = null;\r\n    this.vBase = null;\r\n    this.state = {};\r\n  }\r\n  setState(state) {\r\n    this.state = Object.assign(\r\n      {},\r\n      this.state,\r\n      typeof state == \"function\" ? state(this.state, this.props) : state\r\n    );\r\n\r\n    renderComponent(this);\r\n  }\r\n}\r\n\r\nfunction renderComponent(node) {\r\n  let nApp = node.render();\r\n  node.vBase = diffTree(node.vBase, nApp)(node.vBase);\r\n  node.vNode = nApp;\r\n}\r\n\r\n/* Exports */\r\nexport { render, arch, Component };\r\n"],"names":["renderHandler","node","document","createTextNode","renderNode","vNode","component","render","tag","attrs","children","el","createElement","key","value","Object","entries","startsWith","addEventListener","substring","toLowerCase","setAttribute","child","appendChild","vBase","diffChildren","oldChildren","newChildren","patches","forEach","i","push","diffTree","_patches","slice","length","parent","patch","zip","xs","ys","zipped","Math","min","childNodes","oldTree","newTree","remove","replacement","replaceWith","patchAttrs","diffAttrs","oldAttrs","newAttrs","removeAttribute","patchChildren","Component","[object Object]","props","shift","this","assign","flat","filter","v","state","renderComponent","nApp","arch","target","mount"],"mappings":"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"}