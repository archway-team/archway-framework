{"version":3,"file":"index.mjs","sources":["../../../index.js"],"sourcesContent":["/* Rendering Engine */\r\nfunction arch(tag, attrs, ...children) {\r\n  return {\r\n    tag,\r\n    attrs,\r\n    children: children.flat() || [],\r\n  };\r\n}\r\n\r\nfunction renderNode(node) {\r\n  let vNode = node;\r\n  let component = typeof node.render == \"function\";\r\n  if (component) {\r\n    vNode = node.render();\r\n    node.vNode = vNode;\r\n  }\r\n\r\n  const { tag, attrs, children } = vNode;\r\n\r\n  let el = document.createElement(tag);\r\n\r\n  for (const [key, value] of Object.entries(attrs)) {\r\n    key.startsWith(\"on\")\r\n      ? el.addEventListener(key.substring(2).toLowerCase(), value)\r\n      : el.setAttribute(key, value);\r\n  }\r\n  for (const child of children) {\r\n    el.appendChild(renderHandler(child));\r\n  }\r\n  if (component) {\r\n    node.vBase = el;\r\n  }\r\n\r\n  return el;\r\n}\r\n\r\nfunction renderHandler(node) {\r\n  return typeof node === \"string\"\r\n    ? document.createTextNode(node)\r\n    : renderNode(node);\r\n}\r\n\r\nfunction mount(node, target) {\r\n  target.appendChild(node);\r\n  return node;\r\n}\r\n\r\nfunction render(node, target) {\r\n  mount(renderHandler(node), target);\r\n}\r\n\r\n/* Diff Algorithm */\r\nfunction zip(xs, ys) {\r\n  const zipped = [];\r\n  for (let i = 0; i < Math.min(xs, ys); i++) {\r\n    zipped.push([xs[i], ys[i]]);\r\n  }\r\n  return zipped;\r\n}\r\n\r\nfunction diffAttrs(oldAttrs, newAttrs) {\r\n  let patches = [];\r\n  for (const [key, value] of Object.entries(newAttrs)) {\r\n    patches.push((node) => {\r\n      key.startsWith(\"on\")\r\n        ? node.addEventListener(key.substring(2).toLowerCase(), value)\r\n        : node.setAttribute(key, value);\r\n\r\n      return node;\r\n    });\r\n  }\r\n  for (const key in oldAttrs) {\r\n    if (!(key in newAttrs)) {\r\n      patches.push((node) => {\r\n        node.removeAttribute(key);\r\n        return node;\r\n      });\r\n    }\r\n  }\r\n  return (node) => {\r\n    for (const patch of patches) {\r\n      patch(node);\r\n    }\r\n    return node;\r\n  };\r\n}\r\n\r\nfunction diffChildren(oldChildren, newChildren) {\r\n  let patches = [];\r\n  oldChildren.forEach((child, i) => {\r\n    patches.push(diffTree(child, newChildren[i]));\r\n  });\r\n\r\n  let _patches = [];\r\n  for (const child of newChildren.slice(oldChildren.length)) {\r\n    _patches.push((node) => {\r\n      node.appendChild(renderHandler(child));\r\n      return node;\r\n    });\r\n  }\r\n  return (parent) => {\r\n    for (const [patch, child] of zip(patches, parent.childNodes)) patch(child);\r\n\r\n    for (const patch of _patches) patch(parent);\r\n\r\n    return parent;\r\n  };\r\n}\r\n\r\nfunction diffTree(oldTree, newTree) {\r\n  if (!newTree) {\r\n    return (node) => {\r\n      node.remove();\r\n    };\r\n  }\r\n  if (typeof oldTree == \"string\" || typeof newTree == \"string\") {\r\n    if (oldTree !== newTree) {\r\n      return (node) => {\r\n        const replacement = renderHandler(newTree);\r\n        node.replaceWith(replacement);\r\n        return replacement;\r\n      };\r\n    } else {\r\n      return (node) => node;\r\n    }\r\n  }\r\n  if (oldTree.tag !== newTree.tag) {\r\n    return (node) => {\r\n      const replacement = renderHandler(newTree);\r\n      node.replaceWith(replacement);\r\n      return replacement;\r\n    };\r\n  }\r\n  const patchAttrs = diffAttrs(oldTree.attrs, newTree.attrs);\r\n  const patchChildren = diffChildren(oldTree.children, newTree.children);\r\n\r\n  return (node) => {\r\n    patchAttrs(node);\r\n    patchChildren(node);\r\n    return node;\r\n  };\r\n}\r\n\r\n/* Component */\r\nclass Component {\r\n  constructor(...props) {\r\n    let attrs = props.shift() || {};\r\n\r\n    this.props = Object.assign(attrs, {\r\n      children: props.flat().filter((v) => v) || [],\r\n    });\r\n\r\n    this.vNode = null;\r\n    this.vBase = null;\r\n    this.state = {};\r\n  }\r\n  setState(state) {\r\n    this.state = Object.assign(\r\n      {},\r\n      this.state,\r\n      typeof state == \"function\" ? state(this.state, this.props) : state\r\n    );\r\n\r\n    renderComponent(this);\r\n  }\r\n}\r\n\r\nfunction renderComponent(node) {\r\n  let nApp = node.render();\r\n  node.vBase = diffTree(node.vBase, nApp)(node.vBase);\r\n  node.vNode = nApp;\r\n}\r\n\r\n/* Exports */\r\nexport { render, arch, Component };\r\n"],"names":["arch","tag","attrs","children","flat","renderHandler","node","document","createTextNode","renderNode","vNode","component","render","el","createElement","key","value","Object","entries","startsWith","addEventListener","substring","toLowerCase","setAttribute","child","appendChild","vBase","target","mount","diffChildren","oldChildren","newChildren","patches","forEach","i","push","diffTree","_patches","slice","length","parent","patch","zip","xs","ys","zipped","Math","min","childNodes","oldTree","newTree","remove","replacement","replaceWith","patchAttrs","diffAttrs","oldAttrs","newAttrs","removeAttribute","patchChildren","Component","[object Object]","props","shift","this","assign","filter","v","state","renderComponent","nApp"],"mappings":"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"}